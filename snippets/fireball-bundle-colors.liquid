{% comment %}Fireball - Bundle Color Pickers (Dawn 15.4) - requires product tag "7-Color-Bundles"{% endcomment %}
{% assign fireball_colors = "Red|Blue|Black|White|Green|Yellow|Orange" | split: "|" %}

<div id="FireballBundleColors-{{ section_id }}" class="fireball-bundle-colors hidden" data-max="4">
  <!-- Fireball - Provide product JSON so JS can always read variants reliably -->
  <script type="application/json" id="FireballProductData-{{ section_id }}">{{ product | json }}</script>

  <fieldset class="product-form__input">
    <legend class="form__label">Choose a color for each jar in your bundle.</legend>

    {% for i in (1..4) %}
      <div class="fireball-bundle-row" data-index="{{ i }}">
        <label class="form__label" for="BundleColor{{ i }}-{{ section_id }}">Select Color #{{ i }}</label>

        <div class="select">
          <select
            class="select__select"
            id="BundleColor{{ i }}-{{ section_id }}"
            name="properties[Select Color #{{ i }}]"
            autocomplete="off"
          >
            <option value="" selected>Please select</option>
            {% for c in fireball_colors %}
              <option value="{{ c }}">{{ c }}</option>
            {% endfor %}
          </select>
          <span class="icon-caret">
            {{- 'icon-caret.svg' | inline_asset_content -}}
          </span>
        </div>
      </div>
    {% endfor %}
  </fieldset>
</div>

<style>
  /* Fireball - keep it native Dawn */
  #FireballBundleColors-{{ section_id }}.hidden { display: none; }

  /* spacing to match Dawn fields */
  #FireballBundleColors-{{ section_id }} .fireball-bundle-row { 
    margin: 0.5rem 0 1rem; 
  }
  #FireballBundleColors-{{ section_id }} .form__label { 
    margin-bottom: .25rem; 
  }

  /* prevent select from getting squashed in grid/containers */
  #FireballBundleColors-{{ section_id }} .select { 
    width: 100%; 
  }
  #FireballBundleColors-{{ section_id }} .select__select { 
    width: 100%; 
    min-width: 0; 
  }
</style>

<script>
/* Fireball – PDP + Featured Product (Dawn 15.4)
   - Wide 2/4 detection (2 Pack, 2-Pack, 2pk, Set of 2, Two, x2, etc.)
   - Robust form targeting for homepage
   - Blocks Add to cart + dynamic checkout until all visible color selects are chosen
*/
(function () {
  const sectionId = "{{ section_id }}";
  const wrapper = document.getElementById(`FireballBundleColors-${sectionId}`);
  if (!wrapper) return;

  // Find the real product form for THIS section (homepage + PDP)
  const pf = document.querySelector(`product-form[data-section-id="${sectionId}"]`);
  const form = pf ? pf.querySelector('form[action*="/cart/add"]') : wrapper.closest('form[action*="/cart/add"]');
  if (!form) return;

  // Let native "required" help us too
  try { form.removeAttribute('novalidate'); } catch (e) {}

  // ---------- Helpers ----------
  function getProductData() {
    try {
      const el = document.getElementById(`FireballProductData-${sectionId}`);
      const data = el ? JSON.parse(el.textContent) : null;
      return (data && typeof data === 'object') ? data : null;
    } catch (e) { return null; }
  }
  const productData = getProductData();

  function currentVariant() {
    const idInput = form.querySelector('input[name="id"]');
    const vid = idInput ? idInput.value : null;
    if (!productData || !Array.isArray(productData.variants) || !vid) return null;
    try {
      return productData.variants.find && productData.variants.find(v => String(v.id) === String(vid)) || null;
    } catch (e) {
      return null;
    }
  }

  // Wide matchers (numeric + spelled)
  const rx2 = /\b(2\s*[- ]?pack|2\s*pk|set\s*of\s*2|bundle\s*(of\s*)?2|x\s*2|\(2\)|\btwo\b|\b2\b|count\s*[:=]?\s*2)\b/i;
  const rx4 = /\b(4\s*[- ]?pack|4\s*pk|set\s*of\s*4|bundle\s*(of\s*)?4|x\s*4|\(4\)|\bfour\b|\b4\b|count\s*[:=]?\s*4)\b/i;
  const rxPackish = /(pack|size|count|bundle|set|quantity|qty)/i;

  function matchPackStr(s){ if (!s) return 0; if (rx4.test(s)) return 4; if (rx2.test(s)) return 2; return 0; }

  function packFromVariant(v){
    if (!v) return 0;
    const parts = [];
    if (v.title) parts.push(v.title);
    if (Array.isArray(v.options)) parts.push(...v.options);
    return matchPackStr(parts.join(' | '));
  }

  function collectOptionTexts() {
    const buf = [];
    // Standard option inputs
    form.querySelectorAll('[name^="options"]').forEach(el => {
      const labelEl = el.id ? form.querySelector(`label[for="${el.id}"]`) : null;
      const label = labelEl ? labelEl.textContent.trim() : '';
      if (el.type === 'radio' || el.type === 'checkbox') {
        if (el.checked) buf.push(label || el.value);
      } else if (el.tagName === 'SELECT') {
        const opt = el.options[el.selectedIndex];
        if (opt) buf.push(opt.text || opt.value);
        if (rxPackish.test(label)) buf.push(label);
        const aria = el.getAttribute('aria-label');
        if (aria) buf.push(aria);
      }
    });
    // Variant pill/fieldset text
    form.querySelectorAll('fieldset, .product-form__input, .variant-picker').forEach(fs => {
      const leg = fs.querySelector('legend'); if (leg) buf.push(leg.textContent);
      fs.querySelectorAll('input[type="radio"]:checked + label, .swatch-input__label--variant').forEach(lab => buf.push(lab.textContent));
    });
    return buf.filter(Boolean).map(s => s.trim());
  }

  function visiblePackCandidates() {
    // See if any 2/4-ish option exists on the page (helps homepage edge-cases)
    const all = [];
    form.querySelectorAll('label, option').forEach(el => {
      const t = ('innerText' in el ? el.innerText : el.textContent) || '';
      if (t) all.push(t);
    });
    const joined = all.join(' | ');
    return { has2: rx2.test(joined), has4: rx4.test(joined) };
  }

  function calcPackCount() {
    // a) Variant JSON best-effort
    const v = currentVariant();
    const a = packFromVariant(v);
    if (a) return a;

    // b) Selected control texts
    const b = matchPackStr(collectOptionTexts().join(' | '));
    if (b) return b;

    // c) Explicit quick checks in selected values
    if (form.querySelector('input[type="radio"][value*="4" i]:checked, select option:checked[value*="4" i]')) return 4;
    if (form.querySelector('input[type="radio"][value*="2" i]:checked, select option:checked[value*="2" i]')) return 2;

    // d) Homepage fallback — if we SEE 2/4 candidates at all, default to 2
    const cand = visiblePackCandidates();
    if (cand.has2 || cand.has4) return 2;

    return 0;
  }

  // ---------- UI & enforcement ----------
  function selectionsComplete() {
    if (wrapper.classList.contains('hidden')) return true;
    const rows = wrapper.querySelectorAll('.fireball-bundle-row');
    for (const row of rows) {
      if (row.style.display === 'none') continue;
      const sel = row.querySelector('select');
      if (!sel.value) return false;
    }
    return true;
  }

  function setButtonsEnabled(enabled) {
    const submitBtn = form.querySelector('[type="submit"][name="add"]');
    if (submitBtn) submitBtn.disabled = !enabled;
    const payContainer = form.querySelector('.shopify-payment-button');
    if (payContainer) {
      payContainer.style.pointerEvents = enabled ? '' : 'none';
      payContainer.style.opacity = enabled ? '' : '0.5';
      const innerBtn = payContainer.querySelector('button');
      if (innerBtn) innerBtn.disabled = !enabled;
    }
  }

  function showRows(count) {
    const rows = wrapper.querySelectorAll('.fireball-bundle-row');
    rows.forEach((row, idx) => {
      const sel = row.querySelector('select');
      if (idx + 1 <= count) {
        row.style.display = '';
        sel.setAttribute('required', 'required');
      } else {
        row.style.display = 'none';
        sel.removeAttribute('required');
        sel.value = '';
      }
    });
    wrapper.classList.toggle('hidden', count === 0);
    setButtonsEnabled(selectionsComplete());
  }

  function refresh() {
    showRows(calcPackCount());
  }

  // Block standard submits
  form.addEventListener('submit', function (ev) {
    if (!selectionsComplete()) {
      ev.preventDefault();
      ev.stopImmediatePropagation();
      alert('Please choose a color for each jar in your bundle.');
      return false;
    }
  });

  // HARD BLOCK clicks on Add to cart + dynamic checkout (capture phase)
  (function enforceButtons() {
    function guardAction(e) {
      if (!selectionsComplete()) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        alert('Please choose a color for each jar in your bundle.');
        return false;
      }
    }

    const atc = form.querySelector('[type="submit"][name="add"]');
    if (atc) atc.addEventListener('click', guardAction, true);

    function bindPaymentGuards() {
      const payWrap = form.querySelector('.shopify-payment-button');
      if (!payWrap) return;
      payWrap.addEventListener('click', guardAction, true);

      const unbranded = payWrap.querySelector('.shopify-payment-button__button');
      if (unbranded) unbranded.addEventListener('click', guardAction, true);

      const more = payWrap.querySelector('.shopify-payment-button__more-options');
      if (more) more.addEventListener('click', guardAction, true);
    }

    bindPaymentGuards();
    setTimeout(bindPaymentGuards, 400);
    const payObs = new MutationObserver(bindPaymentGuards);
    payObs.observe(form, { childList: true, subtree: true });
  })();

  // Keep in sync with any change/variant switch
  document.addEventListener('variant:change', e => { if (form.contains(e.target)) refresh(); });
  form.addEventListener('change', refresh);

  const idInput = form.querySelector('input[name="id"]');
  if (idInput && 'MutationObserver' in window) {
    new MutationObserver(refresh).observe(idInput, { attributes: true, attributeFilter: ['value'] });
  }

  // Initial + microtask tick
  refresh();
  setTimeout(refresh, 0);
})();
</script>
