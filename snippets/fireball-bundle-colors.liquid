{% comment %}Fireball - Bundle Color Pickers (Dawn 15.4) - requires product tag "7-Color-Bundles"{% endcomment %}
{% assign fireball_colors = "Red|Blue|Black|White|Green|Yellow|Orange" | split: "|" %}

<div id="FireballBundleColors-{{ section_id }}" class="fireball-bundle-colors hidden" data-max="4">
  <!-- Fireball - Provide product JSON so JS can always read variants reliably -->
  <script type="application/json" id="FireballProductData-{{ section_id }}">{{ product | json }}</script>

  <fieldset class="product-form__input">
    <legend class="form__label">Choose a color for each jar in your bundle.</legend>

    {% for i in (1..4) %}
      <div class="fireball-bundle-row" data-index="{{ i }}">
        <label class="form__label" for="BundleColor{{ i }}-{{ section_id }}">Select Color #{{ i }}</label>

        <div class="select">
          <select
            class="select__select"
            id="BundleColor{{ i }}-{{ section_id }}"
            name="properties[Select Color #{{ i }}]"
            autocomplete="off"
          >
            <option value="" selected>Please select</option>
            {% for c in fireball_colors %}
              <option value="{{ c }}">{{ c }}</option>
            {% endfor %}
          </select>
          <span class="icon-caret">
            {{- 'icon-caret.svg' | inline_asset_content -}}
          </span>
        </div>
      </div>
    {% endfor %}
  </fieldset>
</div>

<style>
  /* Fireball - keep it native Dawn */
  #FireballBundleColors-{{ section_id }}.hidden { display: none; }

  /* spacing to match Dawn fields */
  #FireballBundleColors-{{ section_id }} .fireball-bundle-row { 
    margin: 0.5rem 0 1rem; 
  }
  #FireballBundleColors-{{ section_id }} .form__label { 
    margin-bottom: .25rem; 
  }

  /* prevent select from getting squashed in grid/containers */
  #FireballBundleColors-{{ section_id }} .select { 
    width: 100%; 
  }
  #FireballBundleColors-{{ section_id }} .select__select { 
    width: 100%; 
    min-width: 0; 
  }
</style>

<script>
/* Fireball DEBUG â€“ PDP + Featured Product (Dawn 15.4) */
(function () {
  const DEBUG = true;

  const sectionId = "{{ section_id }}";
  const wrapper = document.getElementById(`FireballBundleColors-${sectionId}`);
  if (!wrapper) { console.warn('[Fireball] wrapper missing', { sectionId }); return; }

  // Prefer the exact product-form for THIS section; fallback to nearest form
  const productFormEl = document.querySelector(`product-form[data-section-id="${sectionId}"]`);
  const form = productFormEl ? productFormEl.querySelector('form[action*="/cart/add"]') : wrapper.closest('form[action*="/cart/add"]');

  // --- Debug HUD ---
  const hud = document.createElement('div');
  hud.style.cssText = 'margin-top:6px;font:12px/1.2 system-ui,Arial;padding:6px 8px;border:1px solid #ddd;border-radius:6px;background:#f7f7f7;color:#333';
  hud.setAttribute('data-fireball-hud','');
  wrapper.appendChild(hud);
  function setHUD(text){ hud.textContent = text; }

  if (!form) {
    setHUD('ðŸ”¥ DEBUG: form NOT found');
    console.error('[Fireball] product form not found', { sectionId, productFormEl, wrapper });
    return;
  }

  // Allow native required
  try { form.removeAttribute('novalidate'); } catch (e) {}

  function getProductData() {
    try {
      const el = document.getElementById(`FireballProductData-${sectionId}`);
      return el ? JSON.parse(el.textContent) : null;
    } catch (e) { return null; }
  }
  const productData = getProductData();

  function currentVariant() {
    const idInput = form.querySelector('input[name="id"]');
    const vid = idInput ? idInput.value : null;
    if (!productData || !vid) return null;
    return productData.variants.find(v => String(v.id) === String(vid)) || null;
  }

  function matchPack(s) {
    if (/(^|\b)(4\s*[- ]?pack|4\s*pk)\b/i.test(s)) return 4;
    if (/(^|\b)(2\s*[- ]?pack|2\s*pk)\b/i.test(s)) return 2;
    return 0;
  }

  // Prefer variant JSON; fallback to DOM controls
  function calcPackCount() {
    const v = currentVariant();
    if (v) {
      const parts = [];
      if (v.title) parts.push(v.title);
      if (Array.isArray(v.options)) parts.push(...v.options);
      const joined = parts.join(' | ');
      const res = matchPack(joined);
      if (res) return res;
    }
    let s = '';
    form.querySelectorAll('[name^="options"]').forEach(el => {
      if ((el.type === 'radio' || el.type === 'checkbox') && el.checked) s += ' ' + el.value;
      else if (el.tagName === 'SELECT') {
        const opt = el.options[el.selectedIndex];
        s += ' ' + (opt ? (opt.text || opt.value) : '');
      }
    });
    if (form.querySelector('input[type="radio"][value*="4 Pack" i]:checked, select option:checked[value*="4 Pack" i]')) return 4;
    if (form.querySelector('input[type="radio"][value*="2 Pack" i]:checked, select option:checked[value*="2 Pack" i]')) return 2;
    return matchPack(s);
  }

  function selectionsComplete() {
    if (wrapper.classList.contains('hidden')) return true;
    const rows = wrapper.querySelectorAll('.fireball-bundle-row');
    for (const row of rows) {
      if (row.style.display === 'none') continue;
      const sel = row.querySelector('select');
      if (!sel.value) return false;
    }
    return true;
  }

  function setButtonsEnabled(enabled) {
    const submitBtn = form.querySelector('[type="submit"][name="add"]');
    if (submitBtn) submitBtn.disabled = !enabled;
    const payContainer = form.querySelector('.shopify-payment-button');
    if (payContainer) {
      payContainer.style.pointerEvents = enabled ? '' : 'none';
      payContainer.style.opacity = enabled ? '' : '0.5';
      const innerBtn = payContainer.querySelector('button');
      if (innerBtn) innerBtn.disabled = !enabled;
    }
  }

  function showRows(count) {
    const rows = wrapper.querySelectorAll('.fireball-bundle-row');
    rows.forEach((row, idx) => {
      const sel = row.querySelector('select');
      if (idx + 1 <= count) {
        row.style.display = '';
        sel.setAttribute('required', 'required');
      } else {
        row.style.display = 'none';
        sel.removeAttribute('required');
        sel.value = '';
      }
    });
    wrapper.classList.toggle('hidden', count === 0);
    setButtonsEnabled(selectionsComplete());
  }

  function refresh(reason) {
    const idInput = form.querySelector('input[name="id"]');
    const vid = idInput ? idInput.value : '(no id)';
    const count = calcPackCount();
    showRows(count);

    if (DEBUG) {
      const state = {
        page: window.location.pathname,
        sectionId,
        formFound: !!form,
        productFormElFound: !!productFormEl,
        variantId: vid,
        packCount: count,
        selectionsComplete: selectionsComplete()
      };
      console.log('[Fireball] refresh:', reason || '(init)', state);
      setHUD(`ðŸ”¥ DEBUG â€¢ form:${!!form} â€¢ section:${sectionId} â€¢ pack:${count} â€¢ complete:${selectionsComplete()}`);
      // expose for quick manual checks
      window.FireballState = state;
    }
  }

  // Block submits if not complete (also stop Dawn's AJAX handler)
  form.addEventListener('submit', function (ev) {
    if (!selectionsComplete()) {
      ev.preventDefault();
      ev.stopImmediatePropagation();
      alert('Please choose a color for each jar in your bundle.');
      if (DEBUG) console.warn('[Fireball] blocked submit â€“ selections incomplete', { sectionId });
      return false;
    }
  });

  document.addEventListener('variant:change', e => { if (form.contains(e.target)) refresh('variant:change'); });
  form.addEventListener('change', () => refresh('form:change'));

  const idInput = form.querySelector('input[name="id"]');
  if (idInput && 'MutationObserver' in window) {
    new MutationObserver(() => refresh('id:mutation')).observe(idInput, { attributes: true, attributeFilter: ['value'] });
  }

  refresh('init');
  setTimeout(() => refresh('post-mount'), 0);
})();
</script>
